import time

from PIL import Image

from pynput.keyboard import Controller as KController, Key
from pynput.mouse import Controller as MController, Button as MButton

# Similasyon iÃ§erisinde herhangi bir koordinat
POSITION = (40, 80)
# TODO Model Ã¼zerinden Ã§alÄ±ÅŸtÄ±ÄŸÄ±nda ona uygun verinin girilmesi lazÄ±m
# 90 derecelik dÃ¶nÃ¼ÅŸ iÃ§in gereken zaman
# TURN_TIME = 1.48
# DÃ¶nÃ¼ÅŸte hÄ±z kaybÄ±nÄ± engellemek iÃ§in verilen hÄ±z sÃ¼resi
TURN_THROTTLE_TIME = 0.8
# Fare ile odaklandÄ±ktan sonra beklenen zaman
FOCUS_WAITING_TIME = 0.5
# ArabayÄ± durdurmak iÃ§in gereken sÃ¼re
BREAK_TIME = 4

# ---------------------- #
#  Deneysel DeÄŸiÅŸkenler  #
# TODO    degiskenler    #
# SLEEP_TIME = 3.75
TURN_TIME = 1.41
UZUN_YOL_TIME = 9.23
KISA_YOL_TIME = 9.23
# ---------------------- #

# KontrolcÃ¼leri ayarlama
keyboard = KController()
mouse = MController()


def __focus():
    """SÄ°milasyona odaklanma
    Fare'yi similasyona getirir ve Ã¼zerine tÄ±klar.
    Odaklanma olmadan tuÅŸ kombinasyonlarÄ±nÄ±n gÃ¶nderimi baÅŸarÄ±sÄ±z olur.
    """

    mouse.position = POSITION
    mouse.click(MButton.left)
    time.sleep(FOCUS_WAITING_TIME)


def __hold_key(key, sec=0.):
    keyboard.press(key)

    if sec > 0:
        time.sleep(sec)
        keyboard.release(key)


# TURN_TIME deÄŸiÅŸebilir
def turn(ratio: float, save_speed=True):
    """AracÄ±n dÃ¶nemsini saÄŸlar
    AracÄ±n dÃ¶nÃ¼ÅŸÃ¼nÃ¼, isteÄŸe baÄŸlÄ± olarak hÄ±z kaybÄ±nÄ± engelleyerek saÄŸlar

    Arguments:
        ratio {float} -- DÃ¶nÃ¼ÅŸ deÄŸeri, `-1` sola 90 derece dÃ¶nÃ¼ÅŸ, `+1` saÄŸa 90 derece dÃ¶nÃ¼ÅŸ anlamÄ±na gelir

    Keyword Arguments:
        save_speed {bool} -- HÄ±zÄ± koru (default: {True})
    """

    key = 'd' if ratio > 0 else 'a'
    # hold_key(key, TURN_TIME * abs(ratio))

    if save_speed:
        __hold_key(key, TURN_TIME * abs(ratio))
    else:
        keyboard.release('w')
        __hold_key(key, TURN_TIME * abs(ratio))
        keyboard.press('w')


# k ye basÄ±lÄ±p basÄ±lmayacaÄŸÄ±na karar veren
def set_speed_limit(limit: bool):
    """20 HÄ±z limitini aktif eder

    Arguments:
        limit {bool} -- `True` veya `False`
    """
    if limit:
        keyboard.press('k')
    else:
        keyboard.release('k')


# w ya basÄ±lÄ± tutuyor
def move():
    """Similasyondaki aracÄ±n ilerlemesi
    Similasyonda manuel olarak 'w' tuÅŸuna basma iÅŸlemini saÄŸlar.

    Keyword Arguments:
        stable {bool} -- Sabit hÄ±zda gitme (default: {False})
    """
    __hold_key('w', 0)  # HÄ±zÄ± kesmeden ilerleme


# AracÄ± durdurup 3 saniye bekler
def stop():
    """
    AracÄ± durdurup 5 saniye bekler
    """
    keyboard.release('w')
    keyboard.press(Key.space)
    time.sleep(5)
    keyboard.release(Key.space)

# tÄ±klayÄ±p sÃ¼rmeyi baÅŸlatÄ±r


def test_etrafindaBirTur():
    initiate()
    time.sleep(37)
    turn(-1)
    time.sleep(3.47)
    turn(-1)
    time.sleep(2.1)
    turn(-1)
    time.sleep(3.55)
    turn(-1)


def initiate():
    """Similasyonu baÅŸlatma
    ArabayÄ± tam gazla hÄ±zlanacak ÅŸekilde similasyonu baÅŸlatÄ±r.
    """

    __focus()
    move()


def slow_down(ratio=1.):
    """ArabayÄ± yavaÅŸlatma
    Durak gibi alanlar gÃ¶rÃ¼ldÃ¼ÄŸÃ¼nde arabayÄ± belli bir oranda yavaÅŸlatma

    Keyword Arguments:
        ratio {float} -- HÄ±z dÃ¼ÅŸÃ¼rme oranÄ± (default: {1.})

    Examples:
        Oran `1` ise araba durur. `0.5` ise hÄ±z yarÄ±ya indirilir
    """

    keyboard.release('w')
    __hold_key(Key.space, BREAK_TIME * ratio)


def test_method(other_test):
    """Test metodlarÄ±nÄ± test eder
    Test metodlarÄ±nÄ± geÃ§en sÃ¼reyi ve adÄ±nÄ± yazarak test eder

    Arguments:
        other_test {function} -- Test metodu
    """

    first_time = time.time()
    other_test()
    print(f"'{other_test.__name__}' metodunda geÃ§en sÃ¼re: {time.time() - first_time}")


def first_part():
    """Ä°lk parÃ§ayÄ± test etme
    BaÅŸlangÄ±Ã§tan, ilk Girilmez levhasÄ±ndaki dÃ¶nÃ¼ÅŸe kadar olan kÄ±smÄ± ele alÄ±r.
    """

    initiate()
    time.sleep(4.9)
    slow_down(1)
    move()
    time.sleep(2.9)
    slow_down(1)
    move()
    time.sleep(2.35)
    turn(-0.755)


def test_second_part():
    time.sleep(3.8)
    turn(0.95)
    time.sleep(4.7)
    turn(-0.95)


def test_third_part():
    time.sleep(4.7)
    turn(-0.5)
    time.sleep(1)
    turn(-0.27)
    time.sleep(3.9)
    turn(-1)


def test_last_part():
    time.sleep(5.3)
    turn(1)
    time.sleep(5.7)
    stop()


def test_duraklarda_dur():
    time.sleep(4.74)
    stop()
    move()
    time.sleep(3.03)
    stop()


def test_sim():
    # DediÄŸim ÅŸekilde testleri `test_method` iÃ§erisinde kullanmamÄ±ÅŸsÄ±n ğŸ˜Ÿ
    # 20 hÄ±z limitini ele almamÄ±ÅŸsÄ±n
    # Onun dÄ±ÅŸÄ±ndakiler iÃ§in teÅŸekkÃ¼rler gÃ¼zel olmuÅŸ :)
    test_method(first_part)
    test_method(test_second_part)
    test_method(test_third_part)
    test_method(test_last_part)


# DoÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rsa testi aktif etme
if __name__ == "__main__":
    test_sim()
